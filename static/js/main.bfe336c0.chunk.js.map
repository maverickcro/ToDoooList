{"version":3,"sources":["components/Todo.js","components/NewTodoForm.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","state","isEditing","task","handleRemove","bind","toogleForm","handleUpdate","handleChange","handleToogle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toogleTodo","className","onSubmit","type","onChange","onClick","completed","class","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","ToDoList","todos","create","remove","update","toogleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfe336c0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Todo.css';\r\nclass ToDo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        };\r\n        this.handleRemove=this.handleRemove.bind(this);\r\n        this.toogleForm=this.toogleForm.bind(this);\r\n        this.handleUpdate=this.handleUpdate.bind(this);\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleToogle=this.handleToogle.bind(this);\r\n    }\r\n    handleRemove() {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n    toogleForm(){\r\n        this.setState({isEditing: !this.state.isEditing});\r\n    }\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        //ovdje moramo definirati task koji ce se updateati i slati parentu odnosno ToDoListi\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({isEditing: false});\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n     }\r\n     handleToogle(evt) {\r\n         this.props.toogleTodo(this.props.id);\r\n     }\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing) {\r\n            result = (<div className=\"Todo\">\r\n                <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={this.state.task} \r\n                        name=\"task\"\r\n                        onChange={this.handleChange}\r\n                        >\r\n                    </input>\r\n                    <button >Save</button>\r\n                </form>\r\n            </div>);\r\n        } else {\r\n            result = (<div className=\"Todo\">\r\n                <li onClick={this.handleToogle} \r\n                className={this.props.completed ? \r\n                    \"Todo-task completed\" : \"Todo-task\"} >\r\n                    {this.props.task}</li>\r\n                    <div className=\"Todo-buttons\">\r\n                        <button onClick={this.toogleForm}>\r\n                            <i class='fas fa-pen'/>\r\n                        </button>\r\n                        <button onClick={this.handleRemove}>\r\n                            <i class='fas fa-trash'/>\r\n                        </button>\r\n                    </div>\r\n                \r\n            </div>);\r\n        }\r\n        return result;\r\n            \r\n    \r\n    }\r\n}\r\n\r\nexport default ToDo;","import React, {Component} from 'react';\r\nimport {v4 as uuid} from 'uuid';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            task: \"\"\r\n        };\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n   \r\n    handleChange(evt) {\r\n       this.setState({\r\n           [evt.target.name]: evt.target.value\r\n       });\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id: uuid(), completed: false});\r\n        this.setState({task: \"\"});\r\n\r\n    }\r\n    render() {\r\n        return(\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>What's on your mind?</label>\r\n                <input \r\n                    type='text'\r\n                    placeholder=\"New Todo\"\r\n                    id='task'\r\n                    name='task'\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Todooo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\nimport './Todo.css';\r\n\r\nclass ToDoList extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state={\r\n        todos: []\r\n    };\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toogleCompletion = this.toogleCompletion.bind(this);\r\n}\r\n    create(newTodo) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        });\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        });\r\n    }\r\n    update(id, updatedTask){\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, task: updatedTask}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n    toogleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n    render() {\r\n       const todos = this.state.todos.map(todo => {\r\n           return <Todo \r\n            key={todo.id} \r\n            id={todo.id} \r\n            task={todo.task}\r\n            completed={todo.completed} \r\n            removeTodo={this.remove}\r\n            updateTodo={this.update}\r\n            toogleTodo={this.toogleCompletion}\r\n            />\r\n       });\r\n        return(\r\n            <div className=\"TodoList\">\r\n                <h1>ToDooo List <span>A React app</span></h1>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodoForm createTodo={this.create}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\nimport ToDoList from './components/ToDoList';\n\n\nfunction App() {\n  return (\n    <div>\n        \n        <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}